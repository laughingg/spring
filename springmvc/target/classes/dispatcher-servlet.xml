<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--dispatcher-servlet.xml 是spring mvc里面的，控制器、拦截uri转发view-->
    <!-- 此文件负责整个 mvc 的配置 -->


    <!--启用spring的一些annotation（注解）-->
    <context:annotation-config/>



    <!-- 配置注解驱动 可以将request参数与绑定到controller参数上 -->
    <!--
    <mvc:annotation-driven /> 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的。
    并提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，读写XML的支持（JAXB），读写JSON的支持（Jackson）。
    后面，我们处理响应ajax请求时，就使用到了对json的支持。
    后面，对action写JUnit单元测试时，要从spring IOC容器中取DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean，来完成测试，
    取的时候要知道是<mvc:annotation-driven />这一句注册的这两个bean。
    -->
    <mvc:annotation-driven/>




    <!--静态资源映射-->
    <!-- 静态资源处理方式 一 -->
    <!--<mvc:default-servlet-handler/>-->

    <!-- 静态资源处理方式 二 -->
    <!--本项目把静态资源放在了webapp的statics目录下，资源映射如下-->
    <mvc:resources mapping="/css/**" location="/WEB-INF/statics/css/"/>
    <mvc:resources mapping="/js/**" location="/WEB-INF/statics/js/"/>
    <mvc:resources mapping="/image/**" location="/WEB-INF/statics/image/"/>


    <!-- 配置视图解析器 -->
    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>-->
        <!--设置JSP文件的目录位置-->
        <property name="prefix" value="/WEB-INF/views/"/><!--设置JSP文件的目录位置-->
        <property name="suffix" value=".jsp"/>
        <!--<property name="exposeContextBeansAsAttributes" value="true"/>-->
    </bean>



    <!-- 自动扫描装配， 将扫描到的 注解类 添加到 ioc容器 生成 bean 对象  -->
    <context:component-scan base-package="com.laughing"/>

</beans>